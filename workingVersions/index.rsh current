'reach 0.1';

const [ isOutcome, P_WINS, D_WINS, DRAW] = makeEnum(3);


//function to compute the winner based on single hand sums
const winner = (pSum, dSum) => {
  // organized with most common occurance first
  if(pSum > 21 || (dSum < 22 && dSum > pSum)){
    return D_WINS;
  } else {
    if(pSum < 22 && (pSum > dSum || dSum > 21)){
      return P_WINS;
    } else return DRAW;
  }
};
assert(winner(20, 21) == D_WINS);
assert(winner(22, 15) == D_WINS);
assert(winner(19, 17) == P_WINS);
assert(winner(21, 20) == P_WINS);
assert(winner(14, 25) == P_WINS);
assert(winner(18, 18) == DRAW);
//assert(winner(21, 21) == DRAW);

// Shared player functions
const Shared = {
  ...hasRandom,
  startGame: Fun([], Tuple(UInt, UInt)),
  informTimeout: Fun([], Null),
  seeTotal: Fun([UInt], Null),
  seeOutcome: Fun([UInt], Null),
  seeTally: Fun([UInt], Null),
  seeTallys: Fun([UInt, UInt], Null),
  seeOver: Fun([UInt, UInt], Null),
};

// this assumes Ace is high
const cardValue = (x) => (x == 1 ? 11 : (x < 10 ? x : 10))
const DEADLINE = 20;


export const main = Reach.App(() => {
  const Player = Participant('Player', {
    ...Shared,
    acceptWager: Fun([UInt], Null),
    getCard: Fun([], UInt),
  });
  const Dealer = Participant('Dealer', {
    ...Shared,
    autoCard: Fun([], UInt),
    seeFirst: Fun([UInt], Null),
    wager: UInt,
    deadline: UInt,
  });
  init();

  const informTimeout = () => {
    each([Player, Dealer], () => {
      interact.informTimeout();
    });
  };

  // dealer sets the bets
  Dealer.only(() => {
    const wager = declassify(interact.wager);
  });

  // Player pays to deploy the contract
  Dealer.publish(wager)
    .pay(wager);
  commit();

  Player.only(() => {
    interact.acceptWager(wager);
  });
  Player.publish().pay(wager)
    .timeout(relativeTime(DEADLINE), () => closeTo(Dealer, informTimeout));

  // start the match loop here exit when a participant reaches 3 wins
  var [pTally, dTally] = [0, 0];
  invariant(balance()== 2 * wager);
  while(pTally < 3 && dTally < 3){
    commit();
    Player.only(() => {
      interact.seeTally(pTally);
    });
    Dealer.only(() => {
      interact.seeTally(dTally);
    });

    // player draws two cards, publishes both - because of the house edge
    Player.only(() => {
      const [playerFirst, playerSecond] = declassify(interact.startGame());
      /*
      const [_playerFirst, _playerSecond] = interact.startGame();
      const [_commitA, _saltA] = makeCommitment(interact, _playerFirst);
      const commitA = declassify(_commitA);
      const playerFirst = declassify(_playerFirst);
      const [_commitC, _saltC] = makeCommitment(interact, _playerSecond);
      const commitC = declassify(_commitC);
      const playerSecond = declassify(_playerSecond);*/
    });

    // commitA, commitC
    Player.publish(playerFirst, playerSecond)
      .timeout(relativeTime(DEADLINE), () => closeTo(Dealer, informTimeout));
    commit();

    Dealer.only(() => {
      const [_dealerFirst, _dealerSecond] = interact.startGame();
      const [_commitB, _saltB] = makeCommitment(interact, _dealerFirst);
      const commitB = declassify(_commitB);
      const dealerFirst = declassify(_dealerFirst);
    });
    // player cannot know dealers second card here
    unknowable(Player,  Dealer(_dealerSecond));
    Dealer.publish(commitB, dealerFirst)
      .timeout(relativeTime(DEADLINE), () => closeTo(Player, informTimeout));

    // display dealer first card to front end
    Dealer.only(() => {
      interact.seeFirst(dealerFirst);
    });
    
    // flags are turned off when first player, then dealer actions are complete
    var [pFlag, dFlag, pSum, dSum, turn] = [1 , 1, (cardValue(playerFirst) + cardValue(playerSecond)), cardValue(dealerFirst), 0];
    invariant(balance() == 2 * wager);
    // nested loop for single hand interactions
    while(pFlag == 1 || dFlag == 1){
      // players loop
      // if its the first turn, update dealers total
      if(turn == 0){
        commit();
          
        // publish second card
        Dealer.only(() => {
          const dealerSecond = declassify(_dealerSecond);
        });
        Dealer.publish(dealerSecond);
        
        // update dealer sum
        [pFlag, dFlag, pSum, dSum, turn] = [1, 1, pSum, dSum + cardValue(dealerSecond), 1];
        continue;
      } else {
        if(pFlag == 1 && pSum < 22){ // player chooses yes or no turns this branch on / off
          // Display current total, prompt for next card
          commit();
          Player.only(() => {
            interact.seeTotal(pSum);
            const nextCard = declassify(interact.getCard());
          });
          Player.publish(nextCard)
            .timeout(relativeTime(DEADLINE), () => closeTo(Dealer, informTimeout));

          // update pSum, check nextCard for off 
          [pFlag, dFlag, pSum, dSum, turn] = [(nextCard < 1 ? 0 : 1), 1, pSum + cardValue(nextCard), dSum, 1];
          continue;
        }
      }  if ((((dSum < 16 || dSum < pSum) && dSum < 20) && pSum < 22) && pSum != 21){ // dealer needs to draw
        commit();
        Dealer.publish(); // dummy publish
        commit();

          Dealer.only(() => {
            const dealerNext = declassify(interact.autoCard());
          });
          Dealer.publish(dealerNext)
            .timeout(relativeTime(DEADLINE), () => closeTo(Player, informTimeout));
          
          // update sum, leave dealer flag on
          [pFlag, dFlag, pSum, dSum, turn] = [0, 1, pSum, (dSum + cardValue(dealerNext)), 1];
          continue;
        } else {// dealer doesn't need to draw
          commit();
          Dealer.publish();// dummy publish
          // turn the dealer flag off
          [pFlag, dFlag, pSum, dSum, turn] = [0, 0, pSum, dSum, 1];
          continue;
        }
    }; // end of while

    // show sums
    Player.only(() => interact.seeTotal(pSum));
    Dealer.only(() => interact.seeTotal(dSum));

    // display hand outcome
    const outcome = winner(pSum, dSum);
    each([Player, Dealer], () => {
      interact.seeOutcome(outcome);
    });

    if(outcome == 0){
      // player wins, increment pTally
        [pTally, dTally] = [pTally + 1, dTally];
        continue;
    } else {
      // dealer wins, increment dTally
      if(outcome == 1){
        [pTally, dTally] = [pTally, dTally + 1];
        continue;
      } else {
        // draw don't update tallys
        [pTally, dTally] = [pTally, dTally];
        continue;
      } 
    }
};//end of tally while loop

  each([Player, Dealer], () => {
    interact.seeTallys(pTally, dTally);
    interact.seeOver(pTally, dTally);
  });

  // send wager to winner
  transfer(2 * wager).to(pTally > dTally ? Player : Dealer);
  commit();
  exit();
});
